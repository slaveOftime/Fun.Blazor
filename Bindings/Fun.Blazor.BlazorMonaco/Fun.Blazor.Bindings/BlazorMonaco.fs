namespace rec BlazorMonaco.DslInternals

open System.Threading.Tasks
open FSharp.Data.Adaptive
open Fun.Blazor
open Fun.Blazor.Operators
open BlazorMonaco.DslInternals

type EditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit ComponentWithDomAndChildAttrBuilder<'FunBlazorGeneric>()
    [<CustomOperation("Id")>] member inline _.Id ([<InlineIfLambda>] render: AttrRenderFragment, x: System.String) = render ==> ("Id" => x)
    [<CustomOperation("CssClass")>] member inline _.CssClass ([<InlineIfLambda>] render: AttrRenderFragment, x: System.String) = render ==> ("CssClass" => x)
    [<CustomOperation("OnDidDispose")>] member inline _.OnDidDispose ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidDispose", fn)
    [<CustomOperation("OnDidDispose")>] member inline _.OnDidDispose ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidDispose", fn)
    [<CustomOperation("OnDidInit")>] member inline _.OnDidInit ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidInit", fn)
    [<CustomOperation("OnDidInit")>] member inline _.OnDidInit ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidInit", fn)

type CodeEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit EditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("OnDidChangeModelContent")>] member inline _.OnDidChangeModelContent ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelContentChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelContent", fn)
    [<CustomOperation("OnDidChangeModelContent")>] member inline _.OnDidChangeModelContent ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelContentChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelContent", fn)
    [<CustomOperation("OnDidChangeModelLanguage")>] member inline _.OnDidChangeModelLanguage ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelLanguage", fn)
    [<CustomOperation("OnDidChangeModelLanguage")>] member inline _.OnDidChangeModelLanguage ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelLanguage", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfiguration")>] member inline _.OnDidChangeModelLanguageConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelLanguageConfiguration", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfiguration")>] member inline _.OnDidChangeModelLanguageConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelLanguageConfiguration", fn)
    [<CustomOperation("OnDidChangeModelOptions")>] member inline _.OnDidChangeModelOptions ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelOptionsChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelOptions", fn)
    [<CustomOperation("OnDidChangeModelOptions")>] member inline _.OnDidChangeModelOptions ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelOptionsChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelOptions", fn)
    [<CustomOperation("OnDidChangeConfiguration")>] member inline _.OnDidChangeConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ConfigurationChangedEvent -> unit) = render ==> html.callback("OnDidChangeConfiguration", fn)
    [<CustomOperation("OnDidChangeConfiguration")>] member inline _.OnDidChangeConfiguration ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ConfigurationChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeConfiguration", fn)
    [<CustomOperation("OnDidChangeCursorPosition")>] member inline _.OnDidChangeCursorPosition ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorPositionChangedEvent -> unit) = render ==> html.callback("OnDidChangeCursorPosition", fn)
    [<CustomOperation("OnDidChangeCursorPosition")>] member inline _.OnDidChangeCursorPosition ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorPositionChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeCursorPosition", fn)
    [<CustomOperation("OnDidChangeCursorSelection")>] member inline _.OnDidChangeCursorSelection ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorSelectionChangedEvent -> unit) = render ==> html.callback("OnDidChangeCursorSelection", fn)
    [<CustomOperation("OnDidChangeCursorSelection")>] member inline _.OnDidChangeCursorSelection ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorSelectionChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeCursorSelection", fn)
    [<CustomOperation("OnWillChangeModel")>] member inline _.OnWillChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> unit) = render ==> html.callback("OnWillChangeModel", fn)
    [<CustomOperation("OnWillChangeModel")>] member inline _.OnWillChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnWillChangeModel", fn)
    [<CustomOperation("OnDidChangeModel")>] member inline _.OnDidChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> unit) = render ==> html.callback("OnDidChangeModel", fn)
    [<CustomOperation("OnDidChangeModel")>] member inline _.OnDidChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModel", fn)
    [<CustomOperation("OnDidChangeModelDecorations")>] member inline _.OnDidChangeModelDecorations ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelDecorationsChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelDecorations", fn)
    [<CustomOperation("OnDidChangeModelDecorations")>] member inline _.OnDidChangeModelDecorations ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelDecorationsChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelDecorations", fn)
    [<CustomOperation("OnDidFocusEditorText")>] member inline _.OnDidFocusEditorText ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidFocusEditorText", fn)
    [<CustomOperation("OnDidFocusEditorText")>] member inline _.OnDidFocusEditorText ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidFocusEditorText", fn)
    [<CustomOperation("OnDidBlurEditorText")>] member inline _.OnDidBlurEditorText ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidBlurEditorText", fn)
    [<CustomOperation("OnDidBlurEditorText")>] member inline _.OnDidBlurEditorText ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidBlurEditorText", fn)
    [<CustomOperation("OnDidFocusEditorWidget")>] member inline _.OnDidFocusEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidFocusEditorWidget", fn)
    [<CustomOperation("OnDidFocusEditorWidget")>] member inline _.OnDidFocusEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidFocusEditorWidget", fn)
    [<CustomOperation("OnDidBlurEditorWidget")>] member inline _.OnDidBlurEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidBlurEditorWidget", fn)
    [<CustomOperation("OnDidBlurEditorWidget")>] member inline _.OnDidBlurEditorWidget ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidBlurEditorWidget", fn)
    [<CustomOperation("OnDidCompositionStart")>] member inline _.OnDidCompositionStart ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidCompositionStart", fn)
    [<CustomOperation("OnDidCompositionStart")>] member inline _.OnDidCompositionStart ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidCompositionStart", fn)
    [<CustomOperation("OnDidCompositionEnd")>] member inline _.OnDidCompositionEnd ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidCompositionEnd", fn)
    [<CustomOperation("OnDidCompositionEnd")>] member inline _.OnDidCompositionEnd ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidCompositionEnd", fn)
    [<CustomOperation("OnDidPaste")>] member inline _.OnDidPaste ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PasteEvent -> unit) = render ==> html.callback("OnDidPaste", fn)
    [<CustomOperation("OnDidPaste")>] member inline _.OnDidPaste ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PasteEvent -> Task<unit>) = render ==> html.callbackTask("OnDidPaste", fn)
    [<CustomOperation("OnMouseUp")>] member inline _.OnMouseUp ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseUp", fn)
    [<CustomOperation("OnMouseUp")>] member inline _.OnMouseUp ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseUp", fn)
    [<CustomOperation("OnMouseDown")>] member inline _.OnMouseDown ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseDown", fn)
    [<CustomOperation("OnMouseDown")>] member inline _.OnMouseDown ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseDown", fn)
    [<CustomOperation("OnContextMenu")>] member inline _.OnContextMenu ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnContextMenu", fn)
    [<CustomOperation("OnContextMenu")>] member inline _.OnContextMenu ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnContextMenu", fn)
    [<CustomOperation("OnMouseMove")>] member inline _.OnMouseMove ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseMove", fn)
    [<CustomOperation("OnMouseMove")>] member inline _.OnMouseMove ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseMove", fn)
    [<CustomOperation("OnMouseLeave")>] member inline _.OnMouseLeave ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PartialEditorMouseEvent -> unit) = render ==> html.callback("OnMouseLeave", fn)
    [<CustomOperation("OnMouseLeave")>] member inline _.OnMouseLeave ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PartialEditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseLeave", fn)
    [<CustomOperation("OnKeyUp")>] member inline _.OnKeyUp ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> unit) = render ==> html.callback("OnKeyUp", fn)
    [<CustomOperation("OnKeyUp")>] member inline _.OnKeyUp ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> Task<unit>) = render ==> html.callbackTask("OnKeyUp", fn)
    [<CustomOperation("OnKeyDown")>] member inline _.OnKeyDown ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> unit) = render ==> html.callback("OnKeyDown", fn)
    [<CustomOperation("OnKeyDown")>] member inline _.OnKeyDown ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> Task<unit>) = render ==> html.callbackTask("OnKeyDown", fn)
    [<CustomOperation("OnDidLayoutChange")>] member inline _.OnDidLayoutChange ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorLayoutInfo -> unit) = render ==> html.callback("OnDidLayoutChange", fn)
    [<CustomOperation("OnDidLayoutChange")>] member inline _.OnDidLayoutChange ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorLayoutInfo -> Task<unit>) = render ==> html.callbackTask("OnDidLayoutChange", fn)
    [<CustomOperation("OnDidContentSizeChange")>] member inline _.OnDidContentSizeChange ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ContentSizeChangedEvent -> unit) = render ==> html.callback("OnDidContentSizeChange", fn)
    [<CustomOperation("OnDidContentSizeChange")>] member inline _.OnDidContentSizeChange ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ContentSizeChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidContentSizeChange", fn)
    [<CustomOperation("OnDidScrollChange")>] member inline _.OnDidScrollChange ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.ScrollEvent -> unit) = render ==> html.callback("OnDidScrollChange", fn)
    [<CustomOperation("OnDidScrollChange")>] member inline _.OnDidScrollChange ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.ScrollEvent -> Task<unit>) = render ==> html.callbackTask("OnDidScrollChange", fn)

type StandaloneCodeEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit CodeEditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("ConstructionOptions")>] member inline _.ConstructionOptions ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> ("ConstructionOptions" => (System.Func<BlazorMonaco.Editor.StandaloneCodeEditor, BlazorMonaco.Editor.StandaloneEditorConstructionOptions>fn))

type DiffEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit EditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("OnDidDisposeOriginal")>] member inline _.OnDidDisposeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidDisposeOriginal", fn)
    [<CustomOperation("OnDidDisposeOriginal")>] member inline _.OnDidDisposeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidDisposeOriginal", fn)
    [<CustomOperation("OnDidInitOriginal")>] member inline _.OnDidInitOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidInitOriginal", fn)
    [<CustomOperation("OnDidInitOriginal")>] member inline _.OnDidInitOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidInitOriginal", fn)
    [<CustomOperation("OnDidChangeModelContentOriginal")>] member inline _.OnDidChangeModelContentOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelContentChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelContentOriginal", fn)
    [<CustomOperation("OnDidChangeModelContentOriginal")>] member inline _.OnDidChangeModelContentOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelContentChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelContentOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageOriginal")>] member inline _.OnDidChangeModelLanguageOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelLanguageOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageOriginal")>] member inline _.OnDidChangeModelLanguageOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelLanguageOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationOriginal")>] member inline _.OnDidChangeModelLanguageConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelLanguageConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationOriginal")>] member inline _.OnDidChangeModelLanguageConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelLanguageConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeModelOptionsOriginal")>] member inline _.OnDidChangeModelOptionsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelOptionsChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelOptionsOriginal", fn)
    [<CustomOperation("OnDidChangeModelOptionsOriginal")>] member inline _.OnDidChangeModelOptionsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelOptionsChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelOptionsOriginal", fn)
    [<CustomOperation("OnDidChangeConfigurationOriginal")>] member inline _.OnDidChangeConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ConfigurationChangedEvent -> unit) = render ==> html.callback("OnDidChangeConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeConfigurationOriginal")>] member inline _.OnDidChangeConfigurationOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ConfigurationChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeConfigurationOriginal", fn)
    [<CustomOperation("OnDidChangeCursorPositionOriginal")>] member inline _.OnDidChangeCursorPositionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorPositionChangedEvent -> unit) = render ==> html.callback("OnDidChangeCursorPositionOriginal", fn)
    [<CustomOperation("OnDidChangeCursorPositionOriginal")>] member inline _.OnDidChangeCursorPositionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorPositionChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeCursorPositionOriginal", fn)
    [<CustomOperation("OnDidChangeCursorSelectionOriginal")>] member inline _.OnDidChangeCursorSelectionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorSelectionChangedEvent -> unit) = render ==> html.callback("OnDidChangeCursorSelectionOriginal", fn)
    [<CustomOperation("OnDidChangeCursorSelectionOriginal")>] member inline _.OnDidChangeCursorSelectionOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorSelectionChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeCursorSelectionOriginal", fn)
    [<CustomOperation("OnWillChangeModelOriginal")>] member inline _.OnWillChangeModelOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> unit) = render ==> html.callback("OnWillChangeModelOriginal", fn)
    [<CustomOperation("OnWillChangeModelOriginal")>] member inline _.OnWillChangeModelOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnWillChangeModelOriginal", fn)
    [<CustomOperation("OnDidChangeModelOriginal")>] member inline _.OnDidChangeModelOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelOriginal", fn)
    [<CustomOperation("OnDidChangeModelOriginal")>] member inline _.OnDidChangeModelOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelOriginal", fn)
    [<CustomOperation("OnDidChangeModelDecorationsOriginal")>] member inline _.OnDidChangeModelDecorationsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelDecorationsChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelDecorationsOriginal", fn)
    [<CustomOperation("OnDidChangeModelDecorationsOriginal")>] member inline _.OnDidChangeModelDecorationsOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelDecorationsChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelDecorationsOriginal", fn)
    [<CustomOperation("OnDidFocusEditorTextOriginal")>] member inline _.OnDidFocusEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidFocusEditorTextOriginal", fn)
    [<CustomOperation("OnDidFocusEditorTextOriginal")>] member inline _.OnDidFocusEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidFocusEditorTextOriginal", fn)
    [<CustomOperation("OnDidBlurEditorTextOriginal")>] member inline _.OnDidBlurEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidBlurEditorTextOriginal", fn)
    [<CustomOperation("OnDidBlurEditorTextOriginal")>] member inline _.OnDidBlurEditorTextOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidBlurEditorTextOriginal", fn)
    [<CustomOperation("OnDidFocusEditorWidgetOriginal")>] member inline _.OnDidFocusEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidFocusEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidFocusEditorWidgetOriginal")>] member inline _.OnDidFocusEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidFocusEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidBlurEditorWidgetOriginal")>] member inline _.OnDidBlurEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidBlurEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidBlurEditorWidgetOriginal")>] member inline _.OnDidBlurEditorWidgetOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidBlurEditorWidgetOriginal", fn)
    [<CustomOperation("OnDidCompositionStartOriginal")>] member inline _.OnDidCompositionStartOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidCompositionStartOriginal", fn)
    [<CustomOperation("OnDidCompositionStartOriginal")>] member inline _.OnDidCompositionStartOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidCompositionStartOriginal", fn)
    [<CustomOperation("OnDidCompositionEndOriginal")>] member inline _.OnDidCompositionEndOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidCompositionEndOriginal", fn)
    [<CustomOperation("OnDidCompositionEndOriginal")>] member inline _.OnDidCompositionEndOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidCompositionEndOriginal", fn)
    [<CustomOperation("OnDidPasteOriginal")>] member inline _.OnDidPasteOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PasteEvent -> unit) = render ==> html.callback("OnDidPasteOriginal", fn)
    [<CustomOperation("OnDidPasteOriginal")>] member inline _.OnDidPasteOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PasteEvent -> Task<unit>) = render ==> html.callbackTask("OnDidPasteOriginal", fn)
    [<CustomOperation("OnMouseUpOriginal")>] member inline _.OnMouseUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseUpOriginal", fn)
    [<CustomOperation("OnMouseUpOriginal")>] member inline _.OnMouseUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseUpOriginal", fn)
    [<CustomOperation("OnMouseDownOriginal")>] member inline _.OnMouseDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseDownOriginal", fn)
    [<CustomOperation("OnMouseDownOriginal")>] member inline _.OnMouseDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseDownOriginal", fn)
    [<CustomOperation("OnContextMenuOriginal")>] member inline _.OnContextMenuOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnContextMenuOriginal", fn)
    [<CustomOperation("OnContextMenuOriginal")>] member inline _.OnContextMenuOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnContextMenuOriginal", fn)
    [<CustomOperation("OnMouseMoveOriginal")>] member inline _.OnMouseMoveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseMoveOriginal", fn)
    [<CustomOperation("OnMouseMoveOriginal")>] member inline _.OnMouseMoveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseMoveOriginal", fn)
    [<CustomOperation("OnMouseLeaveOriginal")>] member inline _.OnMouseLeaveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PartialEditorMouseEvent -> unit) = render ==> html.callback("OnMouseLeaveOriginal", fn)
    [<CustomOperation("OnMouseLeaveOriginal")>] member inline _.OnMouseLeaveOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PartialEditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseLeaveOriginal", fn)
    [<CustomOperation("OnKeyUpOriginal")>] member inline _.OnKeyUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> unit) = render ==> html.callback("OnKeyUpOriginal", fn)
    [<CustomOperation("OnKeyUpOriginal")>] member inline _.OnKeyUpOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> Task<unit>) = render ==> html.callbackTask("OnKeyUpOriginal", fn)
    [<CustomOperation("OnKeyDownOriginal")>] member inline _.OnKeyDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> unit) = render ==> html.callback("OnKeyDownOriginal", fn)
    [<CustomOperation("OnKeyDownOriginal")>] member inline _.OnKeyDownOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> Task<unit>) = render ==> html.callbackTask("OnKeyDownOriginal", fn)
    [<CustomOperation("OnDidLayoutChangeOriginal")>] member inline _.OnDidLayoutChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorLayoutInfo -> unit) = render ==> html.callback("OnDidLayoutChangeOriginal", fn)
    [<CustomOperation("OnDidLayoutChangeOriginal")>] member inline _.OnDidLayoutChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorLayoutInfo -> Task<unit>) = render ==> html.callbackTask("OnDidLayoutChangeOriginal", fn)
    [<CustomOperation("OnDidContentSizeChangeOriginal")>] member inline _.OnDidContentSizeChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ContentSizeChangedEvent -> unit) = render ==> html.callback("OnDidContentSizeChangeOriginal", fn)
    [<CustomOperation("OnDidContentSizeChangeOriginal")>] member inline _.OnDidContentSizeChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ContentSizeChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidContentSizeChangeOriginal", fn)
    [<CustomOperation("OnDidScrollChangeOriginal")>] member inline _.OnDidScrollChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.ScrollEvent -> unit) = render ==> html.callback("OnDidScrollChangeOriginal", fn)
    [<CustomOperation("OnDidScrollChangeOriginal")>] member inline _.OnDidScrollChangeOriginal ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.ScrollEvent -> Task<unit>) = render ==> html.callbackTask("OnDidScrollChangeOriginal", fn)
    [<CustomOperation("OnDidDisposeModified")>] member inline _.OnDidDisposeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidDisposeModified", fn)
    [<CustomOperation("OnDidDisposeModified")>] member inline _.OnDidDisposeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidDisposeModified", fn)
    [<CustomOperation("OnDidInitModified")>] member inline _.OnDidInitModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidInitModified", fn)
    [<CustomOperation("OnDidInitModified")>] member inline _.OnDidInitModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidInitModified", fn)
    [<CustomOperation("OnDidChangeModelContentModified")>] member inline _.OnDidChangeModelContentModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelContentChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelContentModified", fn)
    [<CustomOperation("OnDidChangeModelContentModified")>] member inline _.OnDidChangeModelContentModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelContentChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelContentModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageModified")>] member inline _.OnDidChangeModelLanguageModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelLanguageModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageModified")>] member inline _.OnDidChangeModelLanguageModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelLanguageModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationModified")>] member inline _.OnDidChangeModelLanguageConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelLanguageConfigurationModified", fn)
    [<CustomOperation("OnDidChangeModelLanguageConfigurationModified")>] member inline _.OnDidChangeModelLanguageConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelLanguageConfigurationChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelLanguageConfigurationModified", fn)
    [<CustomOperation("OnDidChangeModelOptionsModified")>] member inline _.OnDidChangeModelOptionsModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelOptionsChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelOptionsModified", fn)
    [<CustomOperation("OnDidChangeModelOptionsModified")>] member inline _.OnDidChangeModelOptionsModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelOptionsChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelOptionsModified", fn)
    [<CustomOperation("OnDidChangeConfigurationModified")>] member inline _.OnDidChangeConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ConfigurationChangedEvent -> unit) = render ==> html.callback("OnDidChangeConfigurationModified", fn)
    [<CustomOperation("OnDidChangeConfigurationModified")>] member inline _.OnDidChangeConfigurationModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ConfigurationChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeConfigurationModified", fn)
    [<CustomOperation("OnDidChangeCursorPositionModified")>] member inline _.OnDidChangeCursorPositionModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorPositionChangedEvent -> unit) = render ==> html.callback("OnDidChangeCursorPositionModified", fn)
    [<CustomOperation("OnDidChangeCursorPositionModified")>] member inline _.OnDidChangeCursorPositionModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorPositionChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeCursorPositionModified", fn)
    [<CustomOperation("OnDidChangeCursorSelectionModified")>] member inline _.OnDidChangeCursorSelectionModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorSelectionChangedEvent -> unit) = render ==> html.callback("OnDidChangeCursorSelectionModified", fn)
    [<CustomOperation("OnDidChangeCursorSelectionModified")>] member inline _.OnDidChangeCursorSelectionModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.CursorSelectionChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeCursorSelectionModified", fn)
    [<CustomOperation("OnWillChangeModelModified")>] member inline _.OnWillChangeModelModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> unit) = render ==> html.callback("OnWillChangeModelModified", fn)
    [<CustomOperation("OnWillChangeModelModified")>] member inline _.OnWillChangeModelModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnWillChangeModelModified", fn)
    [<CustomOperation("OnDidChangeModelModified")>] member inline _.OnDidChangeModelModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelModified", fn)
    [<CustomOperation("OnDidChangeModelModified")>] member inline _.OnDidChangeModelModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelModified", fn)
    [<CustomOperation("OnDidChangeModelDecorationsModified")>] member inline _.OnDidChangeModelDecorationsModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelDecorationsChangedEvent -> unit) = render ==> html.callback("OnDidChangeModelDecorationsModified", fn)
    [<CustomOperation("OnDidChangeModelDecorationsModified")>] member inline _.OnDidChangeModelDecorationsModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ModelDecorationsChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModelDecorationsModified", fn)
    [<CustomOperation("OnDidFocusEditorTextModified")>] member inline _.OnDidFocusEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidFocusEditorTextModified", fn)
    [<CustomOperation("OnDidFocusEditorTextModified")>] member inline _.OnDidFocusEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidFocusEditorTextModified", fn)
    [<CustomOperation("OnDidBlurEditorTextModified")>] member inline _.OnDidBlurEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidBlurEditorTextModified", fn)
    [<CustomOperation("OnDidBlurEditorTextModified")>] member inline _.OnDidBlurEditorTextModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidBlurEditorTextModified", fn)
    [<CustomOperation("OnDidFocusEditorWidgetModified")>] member inline _.OnDidFocusEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidFocusEditorWidgetModified", fn)
    [<CustomOperation("OnDidFocusEditorWidgetModified")>] member inline _.OnDidFocusEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidFocusEditorWidgetModified", fn)
    [<CustomOperation("OnDidBlurEditorWidgetModified")>] member inline _.OnDidBlurEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidBlurEditorWidgetModified", fn)
    [<CustomOperation("OnDidBlurEditorWidgetModified")>] member inline _.OnDidBlurEditorWidgetModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidBlurEditorWidgetModified", fn)
    [<CustomOperation("OnDidCompositionStartModified")>] member inline _.OnDidCompositionStartModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidCompositionStartModified", fn)
    [<CustomOperation("OnDidCompositionStartModified")>] member inline _.OnDidCompositionStartModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidCompositionStartModified", fn)
    [<CustomOperation("OnDidCompositionEndModified")>] member inline _.OnDidCompositionEndModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> unit) = render ==> html.callback("OnDidCompositionEndModified", fn)
    [<CustomOperation("OnDidCompositionEndModified")>] member inline _.OnDidCompositionEndModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: unit -> Task<unit>) = render ==> html.callbackTask("OnDidCompositionEndModified", fn)
    [<CustomOperation("OnDidPasteModified")>] member inline _.OnDidPasteModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PasteEvent -> unit) = render ==> html.callback("OnDidPasteModified", fn)
    [<CustomOperation("OnDidPasteModified")>] member inline _.OnDidPasteModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PasteEvent -> Task<unit>) = render ==> html.callbackTask("OnDidPasteModified", fn)
    [<CustomOperation("OnMouseUpModified")>] member inline _.OnMouseUpModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseUpModified", fn)
    [<CustomOperation("OnMouseUpModified")>] member inline _.OnMouseUpModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseUpModified", fn)
    [<CustomOperation("OnMouseDownModified")>] member inline _.OnMouseDownModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseDownModified", fn)
    [<CustomOperation("OnMouseDownModified")>] member inline _.OnMouseDownModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseDownModified", fn)
    [<CustomOperation("OnContextMenuModified")>] member inline _.OnContextMenuModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnContextMenuModified", fn)
    [<CustomOperation("OnContextMenuModified")>] member inline _.OnContextMenuModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnContextMenuModified", fn)
    [<CustomOperation("OnMouseMoveModified")>] member inline _.OnMouseMoveModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> unit) = render ==> html.callback("OnMouseMoveModified", fn)
    [<CustomOperation("OnMouseMoveModified")>] member inline _.OnMouseMoveModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseMoveModified", fn)
    [<CustomOperation("OnMouseLeaveModified")>] member inline _.OnMouseLeaveModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PartialEditorMouseEvent -> unit) = render ==> html.callback("OnMouseLeaveModified", fn)
    [<CustomOperation("OnMouseLeaveModified")>] member inline _.OnMouseLeaveModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.PartialEditorMouseEvent -> Task<unit>) = render ==> html.callbackTask("OnMouseLeaveModified", fn)
    [<CustomOperation("OnKeyUpModified")>] member inline _.OnKeyUpModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> unit) = render ==> html.callback("OnKeyUpModified", fn)
    [<CustomOperation("OnKeyUpModified")>] member inline _.OnKeyUpModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> Task<unit>) = render ==> html.callbackTask("OnKeyUpModified", fn)
    [<CustomOperation("OnKeyDownModified")>] member inline _.OnKeyDownModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> unit) = render ==> html.callback("OnKeyDownModified", fn)
    [<CustomOperation("OnKeyDownModified")>] member inline _.OnKeyDownModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.KeyboardEvent -> Task<unit>) = render ==> html.callbackTask("OnKeyDownModified", fn)
    [<CustomOperation("OnDidLayoutChangeModified")>] member inline _.OnDidLayoutChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorLayoutInfo -> unit) = render ==> html.callback("OnDidLayoutChangeModified", fn)
    [<CustomOperation("OnDidLayoutChangeModified")>] member inline _.OnDidLayoutChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.EditorLayoutInfo -> Task<unit>) = render ==> html.callbackTask("OnDidLayoutChangeModified", fn)
    [<CustomOperation("OnDidContentSizeChangeModified")>] member inline _.OnDidContentSizeChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ContentSizeChangedEvent -> unit) = render ==> html.callback("OnDidContentSizeChangeModified", fn)
    [<CustomOperation("OnDidContentSizeChangeModified")>] member inline _.OnDidContentSizeChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.ContentSizeChangedEvent -> Task<unit>) = render ==> html.callbackTask("OnDidContentSizeChangeModified", fn)
    [<CustomOperation("OnDidScrollChangeModified")>] member inline _.OnDidScrollChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.ScrollEvent -> unit) = render ==> html.callback("OnDidScrollChangeModified", fn)
    [<CustomOperation("OnDidScrollChangeModified")>] member inline _.OnDidScrollChangeModified ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.ScrollEvent -> Task<unit>) = render ==> html.callbackTask("OnDidScrollChangeModified", fn)
    [<CustomOperation("OnDidUpdateDiff")>] member inline _.OnDidUpdateDiff ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.DiffEditor -> unit) = render ==> html.callback("OnDidUpdateDiff", fn)
    [<CustomOperation("OnDidUpdateDiff")>] member inline _.OnDidUpdateDiff ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.DiffEditor -> Task<unit>) = render ==> html.callbackTask("OnDidUpdateDiff", fn)
    [<CustomOperation("OnDidChangeModel")>] member inline _.OnDidChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.DiffEditor -> unit) = render ==> html.callback("OnDidChangeModel", fn)
    [<CustomOperation("OnDidChangeModel")>] member inline _.OnDidChangeModel ([<InlineIfLambda>] render: AttrRenderFragment, [<InlineIfLambda>] fn: BlazorMonaco.Editor.DiffEditor -> Task<unit>) = render ==> html.callbackTask("OnDidChangeModel", fn)

type StandaloneDiffEditorBuilder<'FunBlazorGeneric when 'FunBlazorGeneric :> Microsoft.AspNetCore.Components.IComponent>() =
    inherit DiffEditorBuilder<'FunBlazorGeneric>()
    [<CustomOperation("ConstructionOptions")>] member inline _.ConstructionOptions ([<InlineIfLambda>] render: AttrRenderFragment, fn) = render ==> ("ConstructionOptions" => (System.Func<BlazorMonaco.Editor.StandaloneDiffEditor, BlazorMonaco.Editor.StandaloneDiffEditorConstructionOptions>fn))

            

// =======================================================================================================================

namespace BlazorMonaco

[<AutoOpen>]
module DslCE =
  
    open System.Diagnostics.CodeAnalysis
    open BlazorMonaco.DslInternals

    type Editor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.Editor>)>] () = inherit EditorBuilder<BlazorMonaco.Editor.Editor>()
    type CodeEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.CodeEditor>)>] () = inherit CodeEditorBuilder<BlazorMonaco.Editor.CodeEditor>()
    type StandaloneCodeEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.StandaloneCodeEditor>)>] () = inherit StandaloneCodeEditorBuilder<BlazorMonaco.Editor.StandaloneCodeEditor>()
    type DiffEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.DiffEditor>)>] () = inherit DiffEditorBuilder<BlazorMonaco.Editor.DiffEditor>()
    type StandaloneDiffEditor' [<DynamicDependency(DynamicallyAccessedMemberTypes.All, typeof<BlazorMonaco.Editor.StandaloneDiffEditor>)>] () = inherit StandaloneDiffEditorBuilder<BlazorMonaco.Editor.StandaloneDiffEditor>()

[<AutoOpen>]
module DslCEInstances =
  
    open System.Diagnostics.CodeAnalysis
    open BlazorMonaco.DslInternals

    let Editor'' = Editor'()
    let CodeEditor'' = CodeEditor'()
    let StandaloneCodeEditor'' = StandaloneCodeEditor'()
    let DiffEditor'' = DiffEditor'()
    let StandaloneDiffEditor'' = StandaloneDiffEditor'()
            